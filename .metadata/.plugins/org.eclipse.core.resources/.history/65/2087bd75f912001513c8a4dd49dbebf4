package com.callsystem.dao.base;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.callsystem.database.ConnectionFactory;
import com.callsystem.model.PessoaVO;

import java.lang.reflect.Array;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javassist.expr.Instanceof;


public abstract class BaseDAO<T> implements IBaseDAO<T> {

	public void save(PessoaVO PessoaVO){

		/*
		 * Isso é uma sql comum, os ? são os parâmetros que nós vamos adicionar
		 * na base de dados
		 */

		String sql = "INSERT INTO PessoaVOs(nome,idade,dataCadastro)" +
				" VALUES(?,?,?)";

		Connection conn = null;
		PreparedStatement pstm = null;

		try {
			//Cria uma conexão com o banco
			conn = ConnectionFactory.createConnectionToMySQL();

			//Cria um PreparedStatment, classe usada para executar a query
			pstm = conn.prepareStatement(sql);

			//Adiciona o valor do primeiro parâmetro da sql
			pstm.setString(1, PessoaVO.getNome());
			//Adicionar o valor do segundo parâmetro da sql
			pstm.setInt(2, PessoaVO.getIdade());
			//Adiciona o valor do terceiro parâmetro da sql
			pstm.setDate(3, new Date(PessoaVO.getDataCadastro().getTime()));

			//Executa a sql para inserção dos dados
			pstm.execute();

		} catch (Exception e) {

			e.printStackTrace();
		}finally{

			//Fecha as conexões

			try{
				if(pstm != null){

					pstm.close();
				}

				if(conn != null){
					conn.close();
				}

			}catch(Exception e){

				e.printStackTrace();
			}
		}
	}

	public void removeById(int id){

		String sql = "DELETE FROM PessoaVOs WHERE id = ?";

		Connection conn = null;
		PreparedStatement pstm = null;

		try {
			conn = ConnectionFactory.createConnectionToMySQL();

			pstm = conn.prepareStatement(sql);

			pstm.setInt(1, id);

			pstm.execute();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{

			try{
				if(pstm != null){

					pstm.close();
				}

				if(conn != null){
					conn.close();
				}

			}catch(Exception e){

				e.printStackTrace();
			}
		}
	}

	public void update(PessoaVO PessoaVO){

		String sql = "UPDATE PessoaVOs SET nome = ?, idade = ?, dataCadastro = ?" +
				" WHERE id = ?";

		Connection conn = null;
		PreparedStatement pstm = null;

		try {
			//Cria uma conexão com o banco
			conn = ConnectionFactory.createConnectionToMySQL();

			//Cria um PreparedStatment, classe usada para executar a query
			pstm = conn.prepareStatement(sql);

			//Adiciona o valor do primeiro parâmetro da sql
			pstm.setString(1, PessoaVO.getNome());
			//Adicionar o valor do segundo parâmetro da sql
			pstm.setInt(2, PessoaVO.getIdade());
			//Adiciona o valor do terceiro parâmetro da sql
			pstm.setDate(3, new Date(PessoaVO.getDataCadastro().getTime()));

			pstm.setInt(4, PessoaVO.getId());

			//Executa a sql para inserção dos dados
			pstm.execute();

		} catch (Exception e) {

			e.printStackTrace();
		}finally{

			//Fecha as conexões

			try{
				if(pstm != null){

					pstm.close();
				}

				if(conn != null){
					conn.close();
				}

			}catch(Exception e){

				e.printStackTrace();
			}
		}
	}

	public List<PessoaVO> getPessoaVOs(){

		String sql = "SELECT * FROM PessoaVOs";

		List<PessoaVO> PessoaVOs = new ArrayList<PessoaVO>();

		Connection conn = null;
		PreparedStatement pstm = null;
		//Classe que vai recuperar os dados do banco de dados
		ResultSet rset = null;

		try {
			conn = ConnectionFactory.createConnectionToMySQL();

			pstm = conn.prepareStatement(sql);

			rset = pstm.executeQuery();

			//Enquanto existir dados no banco de dados, faça
			while(rset.next()){

				PessoaVO PessoaVO = new PessoaVO();

				//Recupera o id do banco e atribui ele ao objeto
				PessoaVO.setId(rset.getInt("id"));

				//Recupera o nome do banco e atribui ele ao objeto
				PessoaVO.setNome(rset.getString("nome"));

				//Recupera a idade do banco e atribui ele ao objeto
				PessoaVO.setIdade(rset.getInt("idade"));

				//Recupera a data do banco e atribui ela ao objeto
				PessoaVO.setDataCadastro(rset.getDate("dataCadastro"));

				//Adiciono o PessoaVO recuperado, a lista de PessoaVOs
				PessoaVOs.add(PessoaVO);
			}
		} catch (Exception e) {

			e.printStackTrace();
		}finally{

			try{

				if(rset != null){

					rset.close();
				}

				if(pstm != null){

					pstm.close();
				}

				if(conn != null){
					conn.close();
				}

			}catch(Exception e){

				e.printStackTrace();
			}
		}

		return PessoaVOs;
	}
}
}
